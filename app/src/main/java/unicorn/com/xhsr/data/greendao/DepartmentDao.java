package unicorn.com.xhsr.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEPARTMENT".
*/
public class DepartmentDao extends AbstractDao<Department, String> {

    public static final String TABLENAME = "DEPARTMENT";

    /**
     * Properties of entity Department.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Level = new Property(2, int.class, "level", false, "LEVEL");
        public final static Property FullName = new Property(3, String.class, "fullName", false, "FULL_NAME");
        public final static Property OrderNo = new Property(4, int.class, "orderNo", false, "ORDER_NO");
        public final static Property ParentId = new Property(5, String.class, "parentId", false, "PARENT_ID");
    };

    private DaoSession daoSession;

    private Query<Department> department_ChildrenQuery;

    public DepartmentDao(DaoConfig config) {
        super(config);
    }
    
    public DepartmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEPARTMENT\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"LEVEL\" INTEGER NOT NULL ," + // 2: level
                "\"FULL_NAME\" TEXT NOT NULL ," + // 3: fullName
                "\"ORDER_NO\" INTEGER NOT NULL ," + // 4: orderNo
                "\"PARENT_ID\" TEXT);"); // 5: parentId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEPARTMENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Department entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getObjectId());
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getLevel());
        stmt.bindString(4, entity.getFullName());
        stmt.bindLong(5, entity.getOrderNo());
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(6, parentId);
        }
    }

    @Override
    protected void attachEntity(Department entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Department readEntity(Cursor cursor, int offset) {
        Department entity = new Department( //
            cursor.getString(offset + 0), // objectId
            cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // level
            cursor.getString(offset + 3), // fullName
            cursor.getInt(offset + 4), // orderNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // parentId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Department entity, int offset) {
        entity.setObjectId(cursor.getString(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setLevel(cursor.getInt(offset + 2));
        entity.setFullName(cursor.getString(offset + 3));
        entity.setOrderNo(cursor.getInt(offset + 4));
        entity.setParentId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Department entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Department entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "children" to-many relationship of Department. */
    public List<Department> _queryDepartment_Children(String parentId) {
        synchronized (this) {
            if (department_ChildrenQuery == null) {
                QueryBuilder<Department> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentId.eq(null));
                queryBuilder.orderRaw("T.'ORDER_NO' ASC");
                department_ChildrenQuery = queryBuilder.build();
            }
        }
        Query<Department> query = department_ChildrenQuery.forCurrentThread();
        query.setParameter(0, parentId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDepartmentDao().getAllColumns());
            builder.append(" FROM DEPARTMENT T");
            builder.append(" LEFT JOIN DEPARTMENT T0 ON T.\"PARENT_ID\"=T0.\"OBJECT_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Department loadCurrentDeep(Cursor cursor, boolean lock) {
        Department entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Department parent = loadCurrentOther(daoSession.getDepartmentDao(), cursor, offset);
        entity.setParent(parent);

        return entity;    
    }

    public Department loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Department> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Department> list = new ArrayList<Department>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Department> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Department> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
